#!/usr/bin/env bash

SRC_DIR=$(pwd)
BUILD_DIR="$(pwd)/build.tmp"

function build_platform() {
    TARGETS=$1
    PLATFORM="$2"
    SRC_DIR="$3"
    BUILD_DIR="$4"
    NCPU="$5"
    
    # PLUGIN_DIR="$SRC_DIR/q4fms/$PLATFORM"
    PLATFORM_DIR="$BUILD_DIR/$PLATFORM"
    
    CMAKE_FLAGS=(
        -DCMAKE_BUILD_TYPE=RelWithDbgInfo
    )
    if [ "$PLATFORM" == "win_x64" ]; then
        CMAKE_FLAGS+=(-DCMAKE_TOOLCHAIN_FILE="$SRC_DIR/XCompile.txt")
        CMAKE_FLAGS+=(-DHOST=x86_64-w64-mingw32)
    fi
    
    mkdir -p "$PLATFORM_DIR"
    (\
        cd "$PLATFORM_DIR" && \
        cmake "${CMAKE_FLAGS[@]}" "$SRC_DIR" && \
        make "${TARGETS[@]}" -j $NCPUS \
    ) || exit 1
}

mkdir -p "$BUILD_DIR"

TARGETS=(avionics)

case $(uname) in
Linux)
    NCPUS=$(( $(grep 'processor[[:space:]]\+:' /proc/cpuinfo | wc -l) + 1 ))
    build_platform $TARGETS "lin_x64" "$SRC_DIR" "$BUILD_DIR" $NCPUS && \
    build_platform $TARGETS "win_x64" "$SRC_DIR" "$BUILD_DIR" $NCPUS && \
    rm -rf "$BUILD_DIR"
    
    # rm -rf "$BUILD_DIR"
    ;;
Darwin)
    NCPUS=$(( $(sysctl -n hw.ncpu) + 1 ))
    build_platform $TARGETS "mac_x64" "$SRC_DIR" "$BUILD_DIR" $NCPUS && \
    rm -rf "$BUILD_DIR"
    ;;
*)
    echo "Unsupported build platform" >&2
    exit 1
    ;;
esac
